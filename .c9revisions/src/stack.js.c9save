{"ts":1361503862495,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361503873134,"patch":[[{"diffs":[[1,"(function(global, undef) {\r\n    function isPrimitive(val) {\r\n        return !(Object(val) === val);\r\n    }\r\n    function isArrayLike(val) {\r\n        return !isPrimitive(val) && \r\n            !(typeof val === \"function\") &&\r\n            val.length && \r\n            val.hasOwnProperty(0);\r\n    }\r\n    function Stack(fn, next) {\r\n        if (isArrayLike(fn)) {\r\n            var arr = Array.apply(null, fn);\r\n            return new Stack(arr.shift()).addAll(arr);\r\n        }\r\n        if (!(this instanceof Stack)) {\r\n            return new Stack(fn, next);\r\n        }\r\n        this.fn = fn || new Function;\r\n        this.next = next || undef;\r\n    }\r\n    Stack.prototype.push = function(fn) {\r\n        return new Stack(fn, this);\r\n    };\r\n    Stack.prototype.add = function (fn) {\r\n        return this.next = new Stack(fn, this.next);\r\n    };\r\n    Stack.prototype.addAll = function (arr) {\r\n        var prev = this;\r\n        arr.forEach(function (fn) {\r\n            prev = prev.add(fn);\r\n        });\r\n        return this;\r\n    };\r\n    Stack.prototype.index = function (idx) {\r\n        return !idx ? this : this.next && this.next.index(idx - 1);\r\n    };\r\n    Stack.prototype.search = function (fn) {\r\n        return (this.fn === fn) ? this : this.next && this.next.search(fn);\r\n    };\r\n    Stack.prototype.call = function (arg, reciever) {\r\n        val = this.fn.call(reciever || this, arg);\r\n        return this.next ? this.next.call(val) : val;\r\n    };\r\n    Stack.prototype.apply = function (args, reciever) {\r\n        args = this.fn.apply(reciever|| this, args);\r\n        return this.next ? this.next.apply(reciever || this, args) : val;        \r\n    };\r\n    Stack.prototype.clone = function (fn, next) {\r\n        return new Stack(fn || this.fn, next || this.next);\r\n    };\r\n    Stack.prototype.remove = function () {\r\n        var removed = this.next;\r\n        this.next = undef;\r\n        return removed;\r\n    };\r\n    Stack.prototype.penultimate = function () {\r\n        var current = this;\r\n        var previous;\r\n        while (current.next) {\r\n            previous = current;\r\n            current = current.next;\r\n        }\r\n        return previous;\r\n    };\r\n    Stack.prototype.shift = function () {\r\n        return this.penultimate().remove();\r\n    };\r\n    global.Stack = Stack;\r\n}(this));"]],"start1":0,"start2":0,"length1":0,"length2":2292}]],"length":2292,"saved":false}
